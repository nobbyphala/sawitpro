// Code generated by MockGen. DO NOT EDIT.
// Source: ./helper/helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthHelperInterface is a mock of AuthHelperInterface interface.
type MockAuthHelperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHelperInterfaceMockRecorder
}

// MockAuthHelperInterfaceMockRecorder is the mock recorder for MockAuthHelperInterface.
type MockAuthHelperInterfaceMockRecorder struct {
	mock *MockAuthHelperInterface
}

// NewMockAuthHelperInterface creates a new mock instance.
func NewMockAuthHelperInterface(ctrl *gomock.Controller) *MockAuthHelperInterface {
	mock := &MockAuthHelperInterface{ctrl: ctrl}
	mock.recorder = &MockAuthHelperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHelperInterface) EXPECT() *MockAuthHelperInterfaceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuthHelperInterface) GenerateToken(ctx context.Context, profileId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, profileId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthHelperInterfaceMockRecorder) GenerateToken(ctx, profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthHelperInterface)(nil).GenerateToken), ctx, profileId)
}

// HashPassword mocks base method.
func (m *MockAuthHelperInterface) HashPassword(ctx context.Context, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", ctx, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockAuthHelperInterfaceMockRecorder) HashPassword(ctx, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockAuthHelperInterface)(nil).HashPassword), ctx, password)
}

// VerifyPassword mocks base method.
func (m *MockAuthHelperInterface) VerifyPassword(ctx context.Context, plainPassword, hashedPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", ctx, plainPassword, hashedPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockAuthHelperInterfaceMockRecorder) VerifyPassword(ctx, plainPassword, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockAuthHelperInterface)(nil).VerifyPassword), ctx, plainPassword, hashedPassword)
}

// VerifyToken mocks base method.
func (m *MockAuthHelperInterface) VerifyToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthHelperInterfaceMockRecorder) VerifyToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthHelperInterface)(nil).VerifyToken), ctx, token)
}

// MockValidatorHelperInterface is a mock of ValidatorHelperInterface interface.
type MockValidatorHelperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorHelperInterfaceMockRecorder
}

// MockValidatorHelperInterfaceMockRecorder is the mock recorder for MockValidatorHelperInterface.
type MockValidatorHelperInterfaceMockRecorder struct {
	mock *MockValidatorHelperInterface
}

// NewMockValidatorHelperInterface creates a new mock instance.
func NewMockValidatorHelperInterface(ctrl *gomock.Controller) *MockValidatorHelperInterface {
	mock := &MockValidatorHelperInterface{ctrl: ctrl}
	mock.recorder = &MockValidatorHelperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorHelperInterface) EXPECT() *MockValidatorHelperInterfaceMockRecorder {
	return m.recorder
}

// ValidateStruct mocks base method.
func (m *MockValidatorHelperInterface) ValidateStruct(s interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStruct", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateStruct indicates an expected call of ValidateStruct.
func (mr *MockValidatorHelperInterfaceMockRecorder) ValidateStruct(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStruct", reflect.TypeOf((*MockValidatorHelperInterface)(nil).ValidateStruct), s)
}
