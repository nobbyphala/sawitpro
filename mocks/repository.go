// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entity "sawitpro/entity"
	repository "sawitpro/repository"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockUserProfileRepositoryInterface is a mock of UserProfileRepositoryInterface interface.
type MockUserProfileRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileRepositoryInterfaceMockRecorder
}

// MockUserProfileRepositoryInterfaceMockRecorder is the mock recorder for MockUserProfileRepositoryInterface.
type MockUserProfileRepositoryInterfaceMockRecorder struct {
	mock *MockUserProfileRepositoryInterface
}

// NewMockUserProfileRepositoryInterface creates a new mock instance.
func NewMockUserProfileRepositoryInterface(ctrl *gomock.Controller) *MockUserProfileRepositoryInterface {
	mock := &MockUserProfileRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserProfileRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfileRepositoryInterface) EXPECT() *MockUserProfileRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetProfileById mocks base method.
func (m *MockUserProfileRepositoryInterface) GetProfileById(ctx context.Context, tx *sqlx.Tx, id string) (entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileById", ctx, tx, id)
	ret0, _ := ret[0].(entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileById indicates an expected call of GetProfileById.
func (mr *MockUserProfileRepositoryInterfaceMockRecorder) GetProfileById(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileById", reflect.TypeOf((*MockUserProfileRepositoryInterface)(nil).GetProfileById), ctx, tx, id)
}

// GetProfileByPhoneNumber mocks base method.
func (m *MockUserProfileRepositoryInterface) GetProfileByPhoneNumber(ctx context.Context, tx *sqlx.Tx, phoneNumber string) (entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByPhoneNumber", ctx, tx, phoneNumber)
	ret0, _ := ret[0].(entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByPhoneNumber indicates an expected call of GetProfileByPhoneNumber.
func (mr *MockUserProfileRepositoryInterfaceMockRecorder) GetProfileByPhoneNumber(ctx, tx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByPhoneNumber", reflect.TypeOf((*MockUserProfileRepositoryInterface)(nil).GetProfileByPhoneNumber), ctx, tx, phoneNumber)
}

// IncreaseSuccessLoginCount mocks base method.
func (m *MockUserProfileRepositoryInterface) IncreaseSuccessLoginCount(ctx context.Context, tx *sqlx.Tx, profileId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseSuccessLoginCount", ctx, tx, profileId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseSuccessLoginCount indicates an expected call of IncreaseSuccessLoginCount.
func (mr *MockUserProfileRepositoryInterfaceMockRecorder) IncreaseSuccessLoginCount(ctx, tx, profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseSuccessLoginCount", reflect.TypeOf((*MockUserProfileRepositoryInterface)(nil).IncreaseSuccessLoginCount), ctx, tx, profileId)
}

// InsertProfile mocks base method.
func (m *MockUserProfileRepositoryInterface) InsertProfile(ctx context.Context, tx *sqlx.Tx, user entity.UserProfile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProfile", ctx, tx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProfile indicates an expected call of InsertProfile.
func (mr *MockUserProfileRepositoryInterfaceMockRecorder) InsertProfile(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProfile", reflect.TypeOf((*MockUserProfileRepositoryInterface)(nil).InsertProfile), ctx, tx, user)
}

// RunWithTransaction mocks base method.
func (m *MockUserProfileRepositoryInterface) RunWithTransaction(ctx context.Context, handleFunc repository.TransactionHandleFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithTransaction", ctx, handleFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithTransaction indicates an expected call of RunWithTransaction.
func (mr *MockUserProfileRepositoryInterfaceMockRecorder) RunWithTransaction(ctx, handleFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithTransaction", reflect.TypeOf((*MockUserProfileRepositoryInterface)(nil).RunWithTransaction), ctx, handleFunc)
}

// UpdateProfileById mocks base method.
func (m *MockUserProfileRepositoryInterface) UpdateProfileById(ctx context.Context, tx *sqlx.Tx, id string, updateData entity.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileById", ctx, tx, id, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfileById indicates an expected call of UpdateProfileById.
func (mr *MockUserProfileRepositoryInterfaceMockRecorder) UpdateProfileById(ctx, tx, id, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileById", reflect.TypeOf((*MockUserProfileRepositoryInterface)(nil).UpdateProfileById), ctx, tx, id, updateData)
}
